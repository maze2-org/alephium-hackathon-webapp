import React, { useEffect } from 'react'
import Head from 'next/head'
import styles from '@/styles/Home.module.css'

import { AlephiumConnectButton, useWallet } from '@alephium/web3-react'
import {
  addConsumer,
  completeFetchPrice,
  minimalistExchangeFetchPrice,
  removeConsumer
} from '@/services/minimalist-exchange.service'
import { MinimalistExchange, OracleOperator, OraclePriceRequest } from 'artifacts/ts'
import { ONE_ALPH, addressFromContractId, web3, isBase58 } from '@alephium/web3'

web3.setCurrentNodeProvider('http://127.0.0.1:22973')

// const truncate = (text: string) => {
//   return text.substring(0, 5) + '...' + text.substring(text.length - 5)
// }

export default function Home() {
  const { account, signer } = useWallet()

  const [consumerAddress, setConsumerAddress] = React.useState('')

  const [isModalOpen, setIsModalOpen] = React.useState(false)
  const [modalType, setModalType] = React.useState('')

  const [lastPrice, setLastPrice] = React.useState('')
  const [oracleFees, setOracleFees] = React.useState('')
  const [minimalistExchangeState, setMinimalistExchangeState] = React.useState<'none' | 'fulfilled' | 'wait-oracle'>(
    'none'
  )

  const [requestFulfilledPrice, setRequestFulfilledPrice] = React.useState('')

  const openModal = (type: string) => {
    setModalType(type)
    setIsModalOpen(true)
  }

  const closeModal = (event: any) => {
    if (event.currentTarget === event.target) {
      setIsModalOpen(false)
    }
  }

  const authorizedToExectureDapp = account?.address === process.env.NEXT_MINIMAL_EXCHANGE_OWNER_ADDRESS

  const handleClickExecute = () => {
    if (signer) {
      if (minimalistExchangeState === 'fulfilled') {
        completeFetchPrice(signer, `${process.env.NEXT_MINIMAL_EXCHANGE_ADDRESS}`)
      } else if (minimalistExchangeState === 'none') {
        minimalistExchangeFetchPrice(signer, `${process.env.NEXT_MINIMAL_EXCHANGE_ADDRESS}`)
      }
    }
  }

  const fetchMinimalistExchangeState = async () => {
    const minimalistExchangeState = await MinimalistExchange.at(
      `${process.env.NEXT_MINIMAL_EXCHANGE_ADDRESS}`
    ).fetchState()

    setLastPrice(
      minimalistExchangeState.fields.alphPriceInUsd
        ? (Number(minimalistExchangeState.fields.alphPriceInUsd) / 1e8).toFixed(4)
        : ''
    )

    let state: 'none' | 'fulfilled' | 'wait-oracle' = 'none'
    setRequestFulfilledPrice('')
    if (minimalistExchangeState.fields.priceRequestContractId) {
      const requestState = await OraclePriceRequest.at(
        addressFromContractId(`${minimalistExchangeState.fields.priceRequestContractId}`)
      ).fetchState()
      if (requestState.fields.fulfilled) {
        state = 'fulfilled'
        setRequestFulfilledPrice(
          (Number(requestState.fields.amount) / Math.pow(10, Number(requestState.fields.decimals))).toFixed(4)
        )
      } else {
        state = 'wait-oracle'
      }
    }
    setMinimalistExchangeState(state)
  }

  const handleSubmitAddress = async (type: string) => {
    if (!signer) {
      return
    }

    if (!isBase58(consumerAddress)) {
      console.log('This is not a valid address')
      return
    }

    if (type === 'add') {
      await addConsumer(signer, `${process.env.NEXT_SUBSCRIPTION_ADDRESS}`, consumerAddress)
    } else if (type === 'remove') {
      await removeConsumer(signer, `${process.env.NEXT_SUBSCRIPTION_ADDRESS}`, consumerAddress)
    }

    console.log(type, consumerAddress)
  }

  const fetchOracleFees = async () => {
    const operator = await OracleOperator.at(`${process.env.NEXT_OPERATOR_ADDRESS}`).fetchState()
    setOracleFees((Number(operator.fields.fees) / Number(ONE_ALPH)).toFixed(2))
  }

  useEffect(() => {
    fetchMinimalistExchangeState()
    fetchOracleFees()

    const interval = setInterval(() => {
      fetchMinimalistExchangeState()
    }, 2000)

    return () => {
      clearInterval(interval)
    }
  }, [])

  return (
    <>
      <div className={styles.container}>
        <div className={styles.header}>
          <AlephiumConnectButton />
        </div>
        <div className={styles.line}></div>
        <Head>
          <title>Dapp example</title>
          <meta name="description" content="Generated by @alephium/cli init" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
          <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
        </Head>

        <div className="bg-grhay-100 p-8 border-gray-800 border-2 rounded-lg mt-4 mx-8">
          <h3 className="text-xl font-bold">Seed to be used in your wallet</h3>
          <p className="text-lg font-medium my-4">
            If you deployed the oracle with default parameters, you can use this seed in your wallet to use the
            functions on this page
          </p>
          <code>{process.env.NEXT_MINIMAL_EXCHANGE_OWNER_SEED}</code>
        </div>

        <div className="bg-grhay-100 p-8">
          <div className="flex justify-between mb-6">
            <div className="bg-white shadow rounded p-4 w-1/2 mr-2">
              <h2 className="text-lg font-semibold mb-4">Operator</h2>
              <p>
                Fees: <span className="font-semibold text-gray-700">{oracleFees} ALPH</span>
              </p>
              <p>
                Address: <span className="font-mono text-gray-700">{`${process.env.NEXT_OPERATOR_ADDRESS}`}</span>
              </p>
            </div>

            <div className="bg-white shadow rounded p-4 w-1/2 ml-2">
              <h2 className="text-lg font-semibold mb-4">Minimal exchange DApp</h2>
              <p>
                Demo dapp Address:{' '}
                <span className="font-mono text-gray-700">{`${process.env.NEXT_MINIMAL_EXCHANGE_ADDRESS}`}</span>
              </p>
              <p>
                Last Price:{' '}
                <span className="font-semibold text-gray-700">
                  {lastPrice ? <>{lastPrice} CHF</> : 'Not fetched yet'}
                </span>
              </p>
              <p>
                Current State:{' '}
                <span className="font-semibold text-gray-700">
                  {minimalistExchangeState} {requestFulfilledPrice && <>({requestFulfilledPrice} CHF)</>}
                </span>
              </p>
              <p>
                Subscription:{' '}
                <span className="font-mono text-gray-700">{`${process.env.NEXT_SUBSCRIPTION_ADDRESS}`}</span>
              </p>
            </div>
          </div>

          <div className="flex justify-end mb-6">
            <button
              disabled={!authorizedToExectureDapp}
              title={authorizedToExectureDapp ? 'Execute the dapp' : 'You need to connect with the dapp owner'}
              className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm sm:ml-3 sm:w-auto 
              ${
                authorizedToExectureDapp
                  ? 'bg-indigo-600 text-white hover:bg-indigo-500'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed opacity-50'
              }`}
              onClick={() => handleClickExecute()}
            >
              {minimalistExchangeState === 'wait-oracle' && 'Waiting oracle'}
              {minimalistExchangeState === 'fulfilled' && 'Complete process now'}
              {minimalistExchangeState === 'none' && 'Request price to oracle'}
            </button>
          </div>

          {/* Logs Section */}
          {/* <div className="bg-white shadow-lg rounded-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Logs</h2>
            <div className="overflow-x-auto">
              <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                    <th scope="col" className="py-3 px-6">
                      Date
                    </th>
                    <th scope="col" className="py-3 px-6">
                      From
                    </th>
                    <th scope="col" className="py-3 px-6">
                      To
                    </th>
                    <th scope="col" className="py-3 px-6">
                      ALPH
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <td className="py-4 px-6">Date</td>
                    <td className="py-4 px-6">From</td>
                    <td className="py-4 px-6">To</td>
                    <td className="py-4 px-6">ALPH</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div> */}

          {/* Subscriptions Section */}
          <div className="bg-white shadow-lg rounded-lg p-6 mb-6">
            <div className="flex justify-between mb-6">
              <h2 className="text-xl font-semibold ">Subscriptions</h2>
              <small className="text-sm opacity-70">
                Try remove the dapp as a consumer. It should not be able to request prices anymore
              </small>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full text-sm text-gray-500 dark:text-gray-400">
                <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th scope="col" className="text-left py-3 px-6 text-white">
                      Sub ID
                    </th>
                    <th scope="col" className="text-left py-3 px-6 text-white">
                      Consumers
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {/* Example row */}
                  <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <td className="py-4 px-6">{process.env.NEXT_SUBSCRIPTION_ADDRESS}</td>
                    <td className="py-4 px-6">
                      <button
                        type="button"
                        onClick={() => openModal('add')}
                        disabled={!authorizedToExectureDapp}
                        className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm sm:ml-3 sm:w-auto 
                        ${
                          authorizedToExectureDapp
                            ? 'bg-green-900 text-white hover:bg-green-800'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed opacity-50'
                        }`}
                      >
                        Add consumer
                      </button>
                      <button
                        onClick={() => openModal('remove')}
                        className={`inline-flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm sm:ml-3 sm:w-auto 
                        ${
                          authorizedToExectureDapp
                            ? 'bg-red-900 text-white hover:bg-red-800'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed opacity-50'
                        }`}
                      >
                        Remove consumer
                      </button>
                    </td>
                  </tr>
                  {/* ...other rows */}
                </tbody>
              </table>
            </div>
          </div>

          {/* ...rest of your code */}

          {isModalOpen && (
            <div
              className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full"
              id="my-modal"
              onClick={closeModal}
            >
              <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div className="mt-3 text-center">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    {modalType === 'add' ? 'Add Consumer' : 'Remove Consumer'}
                  </h3>
                  {/* Modal content */}
                  <div className="mt-2 px-7 py-3">
                    <input
                      type="text"
                      className="border-2 rounded p-2 w-full"
                      placeholder="Address"
                      onChange={(e) => setConsumerAddress(e.target.value)}
                    />
                  </div>
                  {/* Modal footer */}
                  <div className="items-center px-4 py-3">
                    <button
                      onClick={() => handleSubmitAddress(modalType)}
                      className="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-300"
                    >
                      Submit
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  )
}
